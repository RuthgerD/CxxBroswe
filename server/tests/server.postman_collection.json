{
	"info": {
		"_postman_id": "fda419ec-31ea-4aa8-9b7a-9e701d72a93c",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Delete pre",
			"item": [
				{
					"name": "Delete all Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5767f1ef-140c-4cad-b91b-8093274f0d35",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32b6cd62-1b6f-4dae-824c-08566cc69dab",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all Diffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "846402f5-6ec7-4ac8-af8e-66b4fd586e15",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/diffs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"diffs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all Proposals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68ea74b7-0060-40b6-a5dc-223294890686",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/proposals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"proposals"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Failure pre",
			"item": [
				{
					"name": "Fail Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea1bde0e-fdb5-4a88-a98a-8692a6fe5ca1",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(400))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"wack\": 123\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid ID User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7432d14a-f3d1-4ea4-99b0-8926098ce6b0",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(400))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/Q",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"Q"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Main",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22eaf533-3297-4f97-990a-a9c0751c9089",
								"exec": [
									"pm.environment.set(\"user_name\", `ItJustWorks+${pm.variables.replaceIn('{{$randomBsBuzz}}')}`)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b84cc0c-1d5c-44c6-9693-f74eac3f5397",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(201))",
									"",
									"pm.environment.set(\"user_id\", pm.response.json())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "random_name",
								"value": "{{$randomAdjective}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{user_name}}\", \"avatar_url\": \"file://ugly.png\", \"role\": \"none\", \"source\": \"dest\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c83e82b-5f79-448f-af33-676970b2d164",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body format\", () => pm.response.to.have.jsonSchema({",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": { \"type\": \"string\" },",
									"        \"passhash\": { \"type\": \"string\" },",
									"        \"diffs\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
									"        \"proposals\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
									"    },",
									"    \"required\": [\"name\"]",
									"}))",
									"",
									"pm.test(\"Correct body data\", () => {",
									"    let json = pm.response.json();",
									"    pm.expect(json.name).to.eql(pm.variables.get(\"user_name\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4040447-d0c1-4ebc-bf33-3a382e4c907e",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(201))",
									"",
									"pm.environment.set(\"diff_id\", pm.response.json())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{user_id}}\",\n    \"content\": \"something\",\n    \"name\": \"dummy diff\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/diffs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"diffs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f459224-d2a0-4ea1-b1d2-529e36b78ef9",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body format\", () => pm.response.to.have.jsonSchema({",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"author\": { \"type\": \"string\" },",
									"        \"content\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"content\"]",
									"}))",
									"",
									"// pm.test(\"Correct body data\", () => {",
									"//     let json = pm.response.json();",
									"//     pm.expect(json.name).to.eql(pm.variables.get(\"user_name\"))",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/diffs/{{diff_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"diffs",
								"{{diff_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Diff to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39f4fb46-85b3-4472-bc84-59a9adb1be76",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body data\", () => {",
									"    let json = pm.response.json();",
									"    pm.expect(json.name).to.eql(pm.variables.get(\"user_name\"))",
									"    pm.expect(json.diffs).to.eql([pm.variables.get(\"diff_id\")])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"diffs\": [\"{{diff_id}}\"],\n    \"proposals\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4256343-ff83-4781-a7de-c8879d75b839",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(201))",
									"",
									"pm.environment.set(\"proposal_id\", pm.response.json())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"P0000\",\n    \"name\": \"Random Proposal\",\n    \"author\": \"{{user_id}}\",\n    \"versions\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/proposals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add proposal version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4fcaf54-6669-4ed1-860a-47e193660504",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/api/proposals/{{proposal_id}}/add_version/{{diff_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"proposals",
								"{{proposal_id}}",
								"add_version",
								"{{diff_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b58ea04-005a-45da-adf4-e3a44fa5af72",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body format\", () => pm.response.to.have.jsonSchema({",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"number\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"author\": { \"type\": \"string\" },",
									"        \"versions\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
									"    },",
									"    \"required\": [\"number\", \"name\", \"author\", \"versions\"]",
									"}))",
									"",
									"// pm.test(\"Correct body data\", () => {",
									"//     let json = pm.response.json();",
									"//     pm.expect(json.name).to.eql(pm.variables.get(\"user_name\"))",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/proposals/{{proposal_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"proposals",
								"{{proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Proposal to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48e383b9-b8e7-4cc6-bc2d-899ecc72f450",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body data\", () => {",
									"    let json = pm.response.json();",
									"    pm.expect(json.name).to.eql(pm.variables.get(\"user_name\"))",
									"    pm.expect(json.diffs).to.eql([pm.variables.get(\"diff_id\")])",
									"    pm.expect(json.proposals).to.eql([pm.variables.get(\"proposal_id\")])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"diffs\": [\"{{diff_id}}\"],\n    \"proposals\": [\"{{proposal_id}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve User + Proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07f6389e-e911-4ca7-b2ae-eb4ee49245f1",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body data\", () => {",
									"    let json = pm.response.json();",
									"    pm.expect(json._id).to.eql(pm.variables.get(\"proposal_id\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/proposals/{{proposal_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"proposals",
								"{{proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Direct add Proposal to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd32c80d-dc12-4da3-b534-fd3db59c7ddd",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Proposal was added to user\", () => {",
									"    pm.sendRequest(`${pm.variables.get(\"host\")}/api/users/${pm.variables.get(\"user_id\")}`, (err, response) => {",
									"        let json = pm.response.json()",
									"        let user_json = response.json()",
									"        pm.expect(user_json.proposals.includes(json)).to.eql(true)",
									"    });",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"P999\",\n    \"name\": \"Random Proposal2\",\n    \"versions\": [\"{{diff_id}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/proposals",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"proposals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination limit & skip",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd3b075c-ca11-4e3f-aff2-768f115c7355",
								"exec": [
									"let amount = 4",
									"pm.environment.set(\"paginate_test_amount\", amount)",
									"",
									"let create_req = (req_name) => {",
									"    console.log(req_name)",
									"    return {",
									"        url: `${pm.variables.get(\"host\")}/api/diffs`,",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                author: pm.variables.get(\"user_id\"),",
									"                content: \"something\",",
									"                name: req_name",
									"            })",
									"        }",
									"    };",
									"}",
									"",
									"for (let i = 0; i < amount * 2; ++i) {",
									"    pm.sendRequest(create_req(amount * 2 - i), (err, response) => {",
									"        // make sure all the requests were succesfull",
									"        pm.expect(err).to.equal(null)",
									"        pm.expect(response).to.have.property('code', 200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b42c909e-a927-4716-810d-32be4a326e12",
								"exec": [
									"const paginate_amount = pm.variables.get(\"paginate_test_amount\")",
									"const json = pm.response.json()",
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Paginate limit\", () => {",
									"    pm.expect(json.length).to.eql(paginate_amount)",
									"});",
									"",
									"pm.sendRequest(`${pm.variables.get(\"host\")}/api/diffs?limit=${paginate_amount}&skip=${paginate_amount}`, (err, response) => {",
									"    pm.test(\"Paginate skip\", () => {",
									"        let skipped_json = response.json()",
									"        pm.expect(skipped_json.length).to.eql(paginate_amount)",
									"        skipped_json.forEach((doc) => json.forEach((doc2) => pm.expect(doc._id).to.not.eql(doc2._id)))",
									"    })",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/diffs?limit={{paginate_test_amount}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"diffs"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{paginate_test_amount}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cebe042b-f1b7-48cb-b54f-cdb2463cae69",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(201))",
									"",
									"pm.environment.set(\"test_id\", pm.response.json())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    sections: {\n    type: Object, required: true, default: {\n      profile: {\n        title: 'Profile',\n        settings: [\n          {name: 'Bio', settingId: 100, type: 'textArea', value: '' }\n        ]\n      },\n      interface: {\n        title: 'Interface',\n        settings: [\n          {name: 'Primary Colour', settingId: 101, type: 'colour', value: '#3584e4' }\n        ]\n      },\n      general: {\n        title: 'General',\n        settings: [\n          { name: 'Some Setting', settingId: 110, type: 'select', value: '1', options: { 1: 'Yes', 2: 'Maybe', 3: 'No' } }\n        ]\n      }\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/settings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29104cae-d3d0-43b8-bef1-37127bec3597",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct body format\", () => pm.response.to.have.jsonSchema({",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"sections\": { \"type\": \"Object\" },",
									"    },",
									"    \"required\": [\"properties\"]",
									"}))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/settings/{{settings_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"settings",
								"{{settings_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "827f52d3-52be-4ab1-8f0b-9394a5899348",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sections\": {\n        \"profile\": {\n            \"title\": \"Profile\",\n            \"settings\": [\n                {\n                    \"name\": \"Bio\",\n                    \"settingId\": 100,\n                    \"type\": \"textArea\",\n                    \"value\": \"Some Test\"\n                }\n            ]\n        },\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/settings/{{settings_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"settings",
								"{{settings_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete post",
			"item": [
				{
					"name": "Direct delete Proposal from User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33ad2795-4017-46f0-b35a-2dd70133a326",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.sendRequest(`${pm.variables.get(\"host\")}/api/users/${pm.variables.get(\"user_id\")}`, (err, response) => {",
									"    pm.test(\"Proposal was added to user\", () => {",
									"    let json = pm.response.json()",
									"    let user_json = response.json()",
									"    pm.expect(user_json.proposals.includes(json)).to.eql(false)",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/proposals/{{proposal_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"proposals",
								"{{proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fece90a-3466-41c4-812c-02a2af66fc72",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct deleted\", () => pm.response.toJSON() == pm.globals.get(\"user_id\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Proposal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bb573ba-e47f-4df5-937b-6002afb018ca",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct deleted\", () => pm.response.toJSON() == pm.globals.get(\"proposal_id\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/proposals/{{proposal_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"proposals",
								"{{proposal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd9ebe1e-3191-4d9f-bed5-35b6d54b2ce2",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(200))",
									"",
									"pm.test(\"Correct deleted\", () => pm.response.toJSON() == pm.globals.get(\"diff_id\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/diffs/{{diff_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"diffs",
								"{{diff_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Failure post",
			"item": [
				{
					"name": "Fail retrieve User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a6bc927-12e1-4178-9f1c-0d41b3ee8628",
								"exec": [
									"pm.test(\"Status\", () => pm.response.to.have.status(404))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET /api",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dbb56059-766e-4a15-99dd-be190234584f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cfe7b764-caff-4a43-91ed-f62a0c192850",
						"exec": [
							"pm.test(\"Status\", () => pm.response.to.have.status(200))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api",
					"host": [
						"{{host}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "195b0824-9926-498d-894e-666d455dd423",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8b699fea-4f2b-4e8a-a18e-04d49e095b9c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e042b425-088a-4a01-84a3-cb27854e91e2",
			"key": "host",
			"value": "http://dev.cxxbroswe.xyz:3000"
		}
	],
	"protocolProfileBehavior": {}
}